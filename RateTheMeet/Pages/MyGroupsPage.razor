@page "/mygroups"

@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject ISurveyService SurveyService

<h1 class="mt-4 ml-4">My Groups</h1>

<div class="row">

    @if (GroupList != null && GroupList.Any())
    {
        int groupNumber1 = 0;
        int groupNumber2 = 0;

            <div class="col-md-6">
                <ul class="list-view">
                    @foreach (var group in GroupList)
                    {
                        @if (groupNumber1 % 2 == 0)
                    {
                            <li class="list-item shadow rounded">
                                <div class="image-container">
                                    <img src="@group.KeyPhoto" class="group-header-img" />
                                    <div class="group-title pr-2 pl-2">@group.Name</div>
                                </div>
                            </li>
                    }
                        groupNumber1++;
                    }
                </ul>
            </div>
            <div class="col-md-6">
                <ul class="list-view">
                    @foreach (var group in GroupList)
                    {
                        @if (groupNumber2 % 2 != 0)
                    {
                            <li class="list-item shadow rounded">
                                <div class="image-container">
                                    <img src="@group.KeyPhoto" class="group-header-img" />
                                    <div class="group-title pr-2 pl-2">@group.Name</div>
                                </div>
                            </li>
                    }
                        groupNumber2++;
                    }
                </ul>
            </div>
    }
    </div>
    @code {

        public List<GroupDTO> GroupList = new List<GroupDTO>();

        protected override async Task OnInitializedAsync()
        {
            Console.WriteLine("OnInitializedAsync");

            try
            {
                // TODO: when shall we force the update?
                GroupList = await SurveyService.GetGroups(false);
            }
            catch (HttpRequestException ex)
            {
                await jsRuntime.InvokeAsync<string>("blazorExtensions.ShowMessage", $"Loading data from the server failed: {ex}");
            }
            catch (Exception ex)
            {
                await jsRuntime.InvokeAsync<string>("blazorExtensions.ShowMessage", $"Oops, we encountered an unexpected error: {ex}");
            }

            Console.WriteLine($"CurrentSurveyList.Count {GroupList?.Count}");
        }
    }

