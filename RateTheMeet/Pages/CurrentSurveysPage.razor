@page "/current"
@inject IJSRuntime jsRuntime
@inject ISurveyService surveyService

<div class="row">
    <div class="col">
        <h1 class="mt-4 ml-4">Current Surveys</h1>
        <ul class="list-view">

            @if (CurrentSurveyList != null && CurrentSurveyList.Any())
            {
                // TODO get Meetup GroupId to group
                @foreach (var survey in CurrentSurveyList)
                {
                    <SurveyListItem survey="@survey" />
                }
            }

        </ul>
        <a href="/editsurvey" class="fixed-button-bottom-right blue-button shadow rounded-button"><i class="far fa-plus fa-fw"></i>New Survey</a>
    </div>
</div>


@code
{

    List<SurveyDTO> CurrentSurveyList = new List<SurveyDTO>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");

        try
        {
            // TODO: when should we force refresh?
            var surveyList = await surveyService.GetSurveys(false);
            CurrentSurveyList = surveyList.Where(survey => !survey.HasCompleted).ToList();
        }
        catch (HttpRequestException ex)
        {
            await jsRuntime.InvokeAsync<string>("blazorExtensions.ShowMessage", $"Loading data from the server failed: {ex}");
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<string>("blazorExtensions.ShowMessage", $"Oops, we encountered an unexpected error: {ex}");
        }

        Console.WriteLine($"CurrentSurveyList.Count {CurrentSurveyList?.Count}");
    }

}
