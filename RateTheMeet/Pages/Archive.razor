@page "/archive"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject ISurveyService SurveyService

<div class="row">
    <div class="col">
        <h1 class="mt-4 ml-4">Archived Surveys</h1>
        <ul class="list-view">

            @if (SurveyList?.Any() == true)
            {
                @foreach (var survey in SurveyList)
                {
                    <SurveyListItem survey="@survey" />
                }
            }

        </ul>
    </div>
</div>


@code
{

    public List<SurveyDTO> SurveyList = new List<SurveyDTO>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");

        try
        {
            // TODO: when do we need to forceUpdate 
            var surveyList = await SurveyService.GetSurveys(false);
            SurveyList = surveyList.Where(survey => survey.HasCompleted).ToList();
        }
        catch (HttpRequestException ex)
        {
            await jsRuntime.InvokeAsync<string>("blazorExtensions.ShowMessage", $"Loading data from the server failed: {ex}");
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeAsync<string>("blazorExtensions.ShowMessage", $"Oops, we encountered an unexpected error: {ex}");
        }

        Console.WriteLine($"SurveyList.Count {SurveyList?.Count}");
    }

}
